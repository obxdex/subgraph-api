// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Trade extends ethereum.Event {
  get params(): Trade__Params {
    return new Trade__Params(this);
  }
}

export class Trade__Params {
  _event: Trade;

  constructor(event: Trade) {
    this._event = event;
  }

  get otype(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountGet(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountGive(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get userFill(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get userFilled(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class OBXExchange__activeBuyOrdersResultValue0Struct extends ethereum.Tuple {
  get _orderId(): Bytes {
    return this[0].toBytes();
  }

  get _price(): BigInt {
    return this[1].toBigInt();
  }

  get _volume(): BigInt {
    return this[2].toBigInt();
  }
}

export class OBXExchange__activeSellOrdersResultValue0Struct extends ethereum.Tuple {
  get _orderId(): Bytes {
    return this[0].toBytes();
  }

  get _price(): BigInt {
    return this[1].toBigInt();
  }

  get _volume(): BigInt {
    return this[2].toBigInt();
  }
}

export class OBXExchange__getAllBuyOrdersResultValue0Struct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class OBXExchange__getAllSellOrdersResultValue0Struct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class OBXExchange__getPVobsResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get volume(): BigInt {
    return this[1].toBigInt();
  }
}

export class OBXExchange__getPVobsResultValue1Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get volume(): BigInt {
    return this[1].toBigInt();
  }
}

export class OBXExchange__getPVobsResult {
  value0: Array<OBXExchange__getPVobsResultValue0Struct>;
  value1: Array<OBXExchange__getPVobsResultValue1Struct>;

  constructor(
    value0: Array<OBXExchange__getPVobsResultValue0Struct>,
    value1: Array<OBXExchange__getPVobsResultValue1Struct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    return map;
  }

  getValue0(): Array<OBXExchange__getPVobsResultValue0Struct> {
    return this.value0;
  }

  getValue1(): Array<OBXExchange__getPVobsResultValue1Struct> {
    return this.value1;
  }
}

export class OBXExchange__orderBookResult {
  value0: BigInt;
  value1: Bytes;
  value2: Bytes;

  constructor(value0: BigInt, value1: Bytes, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    return map;
  }

  getLength(): BigInt {
    return this.value0;
  }

  getHead(): Bytes {
    return this.value1;
  }

  getTail(): Bytes {
    return this.value2;
  }
}

export class OBXExchange extends ethereum.SmartContract {
  static bind(address: Address): OBXExchange {
    return new OBXExchange("OBXExchange", address);
  }

  BRZToken(): Address {
    let result = super.call("BRZToken", "BRZToken():(address)", []);

    return result[0].toAddress();
  }

  try_BRZToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("BRZToken", "BRZToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  KRSTMToken(): Address {
    let result = super.call("KRSTMToken", "KRSTMToken():(address)", []);

    return result[0].toAddress();
  }

  try_KRSTMToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("KRSTMToken", "KRSTMToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  USDCToken(): Address {
    let result = super.call("USDCToken", "USDCToken():(address)", []);

    return result[0].toAddress();
  }

  try_USDCToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDCToken", "USDCToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  USDTToken(): Address {
    let result = super.call("USDTToken", "USDTToken():(address)", []);

    return result[0].toAddress();
  }

  try_USDTToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDTToken", "USDTToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WBTCToken(): Address {
    let result = super.call("WBTCToken", "WBTCToken():(address)", []);

    return result[0].toAddress();
  }

  try_WBTCToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("WBTCToken", "WBTCToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  activeBuyOrders(): Array<OBXExchange__activeBuyOrdersResultValue0Struct> {
    let result = super.call(
      "activeBuyOrders",
      "activeBuyOrders():((bytes32,uint64,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      OBXExchange__activeBuyOrdersResultValue0Struct
    >();
  }

  try_activeBuyOrders(): ethereum.CallResult<
    Array<OBXExchange__activeBuyOrdersResultValue0Struct>
  > {
    let result = super.tryCall(
      "activeBuyOrders",
      "activeBuyOrders():((bytes32,uint64,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<OBXExchange__activeBuyOrdersResultValue0Struct>()
    );
  }

  activeSellOrders(): Array<OBXExchange__activeSellOrdersResultValue0Struct> {
    let result = super.call(
      "activeSellOrders",
      "activeSellOrders():((bytes32,uint64,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      OBXExchange__activeSellOrdersResultValue0Struct
    >();
  }

  try_activeSellOrders(): ethereum.CallResult<
    Array<OBXExchange__activeSellOrdersResultValue0Struct>
  > {
    let result = super.tryCall(
      "activeSellOrders",
      "activeSellOrders():((bytes32,uint64,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<OBXExchange__activeSellOrdersResultValue0Struct>()
    );
  }

  deleteBuyOrder(price: BigInt, orderId: Bytes, priceIdx: BigInt): boolean {
    let result = super.call(
      "deleteBuyOrder",
      "deleteBuyOrder(uint64,bytes32,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromFixedBytes(orderId),
        ethereum.Value.fromUnsignedBigInt(priceIdx)
      ]
    );

    return result[0].toBoolean();
  }

  try_deleteBuyOrder(
    price: BigInt,
    orderId: Bytes,
    priceIdx: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "deleteBuyOrder",
      "deleteBuyOrder(uint64,bytes32,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromFixedBytes(orderId),
        ethereum.Value.fromUnsignedBigInt(priceIdx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deleteSellOrder(price: BigInt, orderId: Bytes, priceIdx: BigInt): boolean {
    let result = super.call(
      "deleteSellOrder",
      "deleteSellOrder(uint64,bytes32,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromFixedBytes(orderId),
        ethereum.Value.fromUnsignedBigInt(priceIdx)
      ]
    );

    return result[0].toBoolean();
  }

  try_deleteSellOrder(
    price: BigInt,
    orderId: Bytes,
    priceIdx: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "deleteSellOrder",
      "deleteSellOrder(uint64,bytes32,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromFixedBytes(orderId),
        ethereum.Value.fromUnsignedBigInt(priceIdx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deployer(): Address {
    let result = super.call("deployer", "deployer():(address)", []);

    return result[0].toAddress();
  }

  try_deployer(): ethereum.CallResult<Address> {
    let result = super.tryCall("deployer", "deployer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeRate(): i32 {
    let result = super.call("feeRate", "feeRate():(uint16)", []);

    return result[0].toI32();
  }

  try_feeRate(): ethereum.CallResult<i32> {
    let result = super.tryCall("feeRate", "feeRate():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAllBuyOrders(
    price: BigInt
  ): Array<OBXExchange__getAllBuyOrdersResultValue0Struct> {
    let result = super.call(
      "getAllBuyOrders",
      "getAllBuyOrders(uint64):((address,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(price)]
    );

    return result[0].toTupleArray<
      OBXExchange__getAllBuyOrdersResultValue0Struct
    >();
  }

  try_getAllBuyOrders(
    price: BigInt
  ): ethereum.CallResult<
    Array<OBXExchange__getAllBuyOrdersResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllBuyOrders",
      "getAllBuyOrders(uint64):((address,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(price)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<OBXExchange__getAllBuyOrdersResultValue0Struct>()
    );
  }

  getAllSellOrders(
    price: BigInt
  ): Array<OBXExchange__getAllSellOrdersResultValue0Struct> {
    let result = super.call(
      "getAllSellOrders",
      "getAllSellOrders(uint64):((address,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(price)]
    );

    return result[0].toTupleArray<
      OBXExchange__getAllSellOrdersResultValue0Struct
    >();
  }

  try_getAllSellOrders(
    price: BigInt
  ): ethereum.CallResult<
    Array<OBXExchange__getAllSellOrdersResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllSellOrders",
      "getAllSellOrders(uint64):((address,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(price)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<OBXExchange__getAllSellOrdersResultValue0Struct>()
    );
  }

  getDeposits(account: Address, tokenAddress: Address): BigInt {
    let result = super.call(
      "getDeposits",
      "getDeposits(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getDeposits(
    account: Address,
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDeposits",
      "getDeposits(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIndexOfPrice(price: BigInt): BigInt {
    let result = super.call(
      "getIndexOfPrice",
      "getIndexOfPrice(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(price)]
    );

    return result[0].toBigInt();
  }

  try_getIndexOfPrice(price: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIndexOfPrice",
      "getIndexOfPrice(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(price)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPVobs(): OBXExchange__getPVobsResult {
    let result = super.call(
      "getPVobs",
      "getPVobs():((uint64,uint256)[],(uint64,uint256)[])",
      []
    );

    return new OBXExchange__getPVobsResult(
      result[0].toTupleArray<OBXExchange__getPVobsResultValue0Struct>(),
      result[1].toTupleArray<OBXExchange__getPVobsResultValue1Struct>()
    );
  }

  try_getPVobs(): ethereum.CallResult<OBXExchange__getPVobsResult> {
    let result = super.tryCall(
      "getPVobs",
      "getPVobs():((uint64,uint256)[],(uint64,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OBXExchange__getPVobsResult(
        value[0].toTupleArray<OBXExchange__getPVobsResultValue0Struct>(),
        value[1].toTupleArray<OBXExchange__getPVobsResultValue1Struct>()
      )
    );
  }

  initPVnode(price: BigInt): BigInt {
    let result = super.call("initPVnode", "initPVnode(uint64):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(price)
    ]);

    return result[0].toBigInt();
  }

  try_initPVnode(price: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("initPVnode", "initPVnode(uint64):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(price)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lotteryPool(): Address {
    let result = super.call("lotteryPool", "lotteryPool():(address)", []);

    return result[0].toAddress();
  }

  try_lotteryPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("lotteryPool", "lotteryPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newBuyOrder(
    price: BigInt,
    buyAmount: BigInt,
    priceIdx: BigInt,
    _referrer: Address
  ): boolean {
    let result = super.call(
      "newBuyOrder",
      "newBuyOrder(uint64,uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(buyAmount),
        ethereum.Value.fromUnsignedBigInt(priceIdx),
        ethereum.Value.fromAddress(_referrer)
      ]
    );

    return result[0].toBoolean();
  }

  try_newBuyOrder(
    price: BigInt,
    buyAmount: BigInt,
    priceIdx: BigInt,
    _referrer: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "newBuyOrder",
      "newBuyOrder(uint64,uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(buyAmount),
        ethereum.Value.fromUnsignedBigInt(priceIdx),
        ethereum.Value.fromAddress(_referrer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  newSellOrder(
    price: BigInt,
    sellAmount: BigInt,
    priceIdx: BigInt,
    _referrer: Address
  ): boolean {
    let result = super.call(
      "newSellOrder",
      "newSellOrder(uint64,uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(sellAmount),
        ethereum.Value.fromUnsignedBigInt(priceIdx),
        ethereum.Value.fromAddress(_referrer)
      ]
    );

    return result[0].toBoolean();
  }

  try_newSellOrder(
    price: BigInt,
    sellAmount: BigInt,
    priceIdx: BigInt,
    _referrer: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "newSellOrder",
      "newSellOrder(uint64,uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(sellAmount),
        ethereum.Value.fromUnsignedBigInt(priceIdx),
        ethereum.Value.fromAddress(_referrer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  obxReferral(): Address {
    let result = super.call("obxReferral", "obxReferral():(address)", []);

    return result[0].toAddress();
  }

  try_obxReferral(): ethereum.CallResult<Address> {
    let result = super.tryCall("obxReferral", "obxReferral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  obxReferralAddress(): Address {
    let result = super.call(
      "obxReferralAddress",
      "obxReferralAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_obxReferralAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "obxReferralAddress",
      "obxReferralAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  orderBook(param0: Address, param1: BigInt): OBXExchange__orderBookResult {
    let result = super.call(
      "orderBook",
      "orderBook(address,uint256):(uint256,bytes32,bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new OBXExchange__orderBookResult(
      result[0].toBigInt(),
      result[1].toBytes(),
      result[2].toBytes()
    );
  }

  try_orderBook(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<OBXExchange__orderBookResult> {
    let result = super.tryCall(
      "orderBook",
      "orderBook(address,uint256):(uint256,bytes32,bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OBXExchange__orderBookResult(
        value[0].toBigInt(),
        value[1].toBytes(),
        value[2].toBytes()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingPool(): Address {
    let result = super.call("stakingPool", "stakingPool():(address)", []);

    return result[0].toAddress();
  }

  try_stakingPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakingPool", "stakingPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  synteticPool(): Address {
    let result = super.call("synteticPool", "synteticPool():(address)", []);

    return result[0].toAddress();
  }

  try_synteticPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("synteticPool", "synteticPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenA(): Address {
    let result = super.call("tokenA", "tokenA():(address)", []);

    return result[0].toAddress();
  }

  try_tokenA(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenA", "tokenA():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenAaccumulatedFee(): BigInt {
    let result = super.call(
      "tokenAaccumulatedFee",
      "tokenAaccumulatedFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokenAaccumulatedFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenAaccumulatedFee",
      "tokenAaccumulatedFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenB(): Address {
    let result = super.call("tokenB", "tokenB():(address)", []);

    return result[0].toAddress();
  }

  try_tokenB(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenB", "tokenB():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenBaccumulatedFee(): BigInt {
    let result = super.call(
      "tokenBaccumulatedFee",
      "tokenBaccumulatedFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokenBaccumulatedFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenBaccumulatedFee",
      "tokenBaccumulatedFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uniswapRouter(): Address {
    let result = super.call("uniswapRouter", "uniswapRouter():(address)", []);

    return result[0].toAddress();
  }

  try_uniswapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapRouter",
      "uniswapRouter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _obxReferral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeRouterCall extends ethereum.Call {
  get inputs(): ChangeRouterCall__Inputs {
    return new ChangeRouterCall__Inputs(this);
  }

  get outputs(): ChangeRouterCall__Outputs {
    return new ChangeRouterCall__Outputs(this);
  }
}

export class ChangeRouterCall__Inputs {
  _call: ChangeRouterCall;

  constructor(call: ChangeRouterCall) {
    this._call = call;
  }

  get _routerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeRouterCall__Outputs {
  _call: ChangeRouterCall;

  constructor(call: ChangeRouterCall) {
    this._call = call;
  }
}

export class DeleteBuyOrderCall extends ethereum.Call {
  get inputs(): DeleteBuyOrderCall__Inputs {
    return new DeleteBuyOrderCall__Inputs(this);
  }

  get outputs(): DeleteBuyOrderCall__Outputs {
    return new DeleteBuyOrderCall__Outputs(this);
  }
}

export class DeleteBuyOrderCall__Inputs {
  _call: DeleteBuyOrderCall;

  constructor(call: DeleteBuyOrderCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get orderId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get priceIdx(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DeleteBuyOrderCall__Outputs {
  _call: DeleteBuyOrderCall;

  constructor(call: DeleteBuyOrderCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DeleteSellOrderCall extends ethereum.Call {
  get inputs(): DeleteSellOrderCall__Inputs {
    return new DeleteSellOrderCall__Inputs(this);
  }

  get outputs(): DeleteSellOrderCall__Outputs {
    return new DeleteSellOrderCall__Outputs(this);
  }
}

export class DeleteSellOrderCall__Inputs {
  _call: DeleteSellOrderCall;

  constructor(call: DeleteSellOrderCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get orderId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get priceIdx(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DeleteSellOrderCall__Outputs {
  _call: DeleteSellOrderCall;

  constructor(call: DeleteSellOrderCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DistributeFeesCall extends ethereum.Call {
  get inputs(): DistributeFeesCall__Inputs {
    return new DistributeFeesCall__Inputs(this);
  }

  get outputs(): DistributeFeesCall__Outputs {
    return new DistributeFeesCall__Outputs(this);
  }
}

export class DistributeFeesCall__Inputs {
  _call: DistributeFeesCall;

  constructor(call: DistributeFeesCall) {
    this._call = call;
  }
}

export class DistributeFeesCall__Outputs {
  _call: DistributeFeesCall;

  constructor(call: DistributeFeesCall) {
    this._call = call;
  }
}

export class InitPVnodeCall extends ethereum.Call {
  get inputs(): InitPVnodeCall__Inputs {
    return new InitPVnodeCall__Inputs(this);
  }

  get outputs(): InitPVnodeCall__Outputs {
    return new InitPVnodeCall__Outputs(this);
  }
}

export class InitPVnodeCall__Inputs {
  _call: InitPVnodeCall;

  constructor(call: InitPVnodeCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InitPVnodeCall__Outputs {
  _call: InitPVnodeCall;

  constructor(call: InitPVnodeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class NewBuyOrderCall extends ethereum.Call {
  get inputs(): NewBuyOrderCall__Inputs {
    return new NewBuyOrderCall__Inputs(this);
  }

  get outputs(): NewBuyOrderCall__Outputs {
    return new NewBuyOrderCall__Outputs(this);
  }
}

export class NewBuyOrderCall__Inputs {
  _call: NewBuyOrderCall;

  constructor(call: NewBuyOrderCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get priceIdx(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _referrer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class NewBuyOrderCall__Outputs {
  _call: NewBuyOrderCall;

  constructor(call: NewBuyOrderCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class NewSellOrderCall extends ethereum.Call {
  get inputs(): NewSellOrderCall__Inputs {
    return new NewSellOrderCall__Inputs(this);
  }

  get outputs(): NewSellOrderCall__Outputs {
    return new NewSellOrderCall__Outputs(this);
  }
}

export class NewSellOrderCall__Inputs {
  _call: NewSellOrderCall;

  constructor(call: NewSellOrderCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sellAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get priceIdx(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _referrer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class NewSellOrderCall__Outputs {
  _call: NewSellOrderCall;

  constructor(call: NewSellOrderCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetEcosystemWalletsCall extends ethereum.Call {
  get inputs(): SetEcosystemWalletsCall__Inputs {
    return new SetEcosystemWalletsCall__Inputs(this);
  }

  get outputs(): SetEcosystemWalletsCall__Outputs {
    return new SetEcosystemWalletsCall__Outputs(this);
  }
}

export class SetEcosystemWalletsCall__Inputs {
  _call: SetEcosystemWalletsCall;

  constructor(call: SetEcosystemWalletsCall) {
    this._call = call;
  }

  get _synteticContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakingContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _lotteryContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetEcosystemWalletsCall__Outputs {
  _call: SetEcosystemWalletsCall;

  constructor(call: SetEcosystemWalletsCall) {
    this._call = call;
  }
}

export class SetFeeReceiverCall extends ethereum.Call {
  get inputs(): SetFeeReceiverCall__Inputs {
    return new SetFeeReceiverCall__Inputs(this);
  }

  get outputs(): SetFeeReceiverCall__Outputs {
    return new SetFeeReceiverCall__Outputs(this);
  }
}

export class SetFeeReceiverCall__Inputs {
  _call: SetFeeReceiverCall;

  constructor(call: SetFeeReceiverCall) {
    this._call = call;
  }

  get _deployer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeReceiverCall__Outputs {
  _call: SetFeeReceiverCall;

  constructor(call: SetFeeReceiverCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
